apply plugin: 'maven-publish'

def LIB_GROUP_ID = 'com.nibalk.trafficcameramap'
def LIB_ARTIFACT_ID = 'framework'
def LIB_VERSION = '3.0.4'

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
//Set environment variable GPR_USER & GPR_API_KEY if not adding a properties file


task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/nibalk/AndroidGithubPackagDemo") //https://github.com/nibalk/AndroidGithubPackagDemo

            /** Create github.properties in root project folder file with
             ** github.user=GITHUB_USER_ID & github.personalAccessToken=PERSONAL_ACCESS_TOKEN
             ** Set env variable GITHUB_USER & GITHUB_PERSONAL_ACCESS_TOKEN if not adding a properties file**/

            credentials {
                //username = System.getenv('GITHUB_USER') ?: project.properties['GITHUB_USER']
                //password = System.getenv('GITHUB_PERSONAL_ACCESS_TOKEN') ?: project.properties['GITHUB_PERSONAL_ACCESS_TOKEN']

                username = githubProperties['github.user'] ?: System.getenv("GITHUB_USER")
                password = githubProperties['github.personalAccessToken'] ?: System.getenv("GITHUB_PERSONAL_ACCESS_TOKEN")
            }
        }
        maven {
            name = 'CustomMavenRepo'
            url = "file://${buildDir}/repo"
        }
    }
    publications {
        frameworkDebug(MavenPublication) {
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version LIB_VERSION
            artifact("$buildDir/outputs/aar/$LIB_ARTIFACT_ID-debug.aar")
//            artifact  ("$buildDir/outputs/aar/framework-debug.aar") {
//                builtyBy packageRelease
//            }
            artifact(sourceJar)

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }

            /*
            //generate .pom file with transitive dependencies
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
             */
        }
    }
}

